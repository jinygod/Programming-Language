[클래스]

OOP(Object Oriented Programming) 객체지향 프로그래밍

Object(객체)
- 실체가 있는 것
- 사람, 동물, 자동차, 물건, 컴퓨터

Object Modeling(객체 모델링)
- 현실 세계에 있는 독립적인 객체를 소프트웨어를 통해서 표현하고자 하는 것을 추상화
- 소프트웨어에서 객체는 현실 세계의 객체를 컴퓨터 프로그래밍 코드로 실체화 시킨 것

객체지향 특징
- 캡슐화: 정보의 은닉, 모듈화, 독립화, 분리, 보호
- 상속화: 기존의 캡슐화 되어있는 모듈을 수정하지 않고 재활용 및 기능의 확장
- 다형성: 상속을 통해서 기존에 있는 기능을 특화된 기능으로 확장

객체 관계(Object Relationship)
- 독립적으로 모듈화 되어 있는 객체들 사이의 연결 관계 또는 연관 관계
- 상속관계: 가족(부모, 자식)
- 사용관계: 객체간의 상호 작용(사업거래, 계약, 서비스)
- 집합관계: 소유하거나 포함하는 관계(고용관계, 부부)

클래스(class)
- 객체를 모델링한 것을 코드로 실체화
- 사용자 자료형(기본자료형들의 집합)
- 객체를 생성하기 위한 탬플릿(틀, 구조) 역할
- 클래스를 인스턴스화(instantiate)하여 객체를 생성(실체화)
- 클래스로부터 만들어진 객체를 해당 클래스에 인스턴스(instance) 또는 객체(object)라고 한다

클래스의 정의(definition)
- 클래스의 구조를 만드는 것
- 클래스는 사용자 자료형을 새로 만드는 것
- 기본 자료형(integer, string, boolean, float, double, ...)은 이미 정의되어 있다.
- 기본 자료형을 사용하는 것은 정의(definition)라고 하지 않고 선언(declare)

클래스의 선언(declare)
- 정의된 즉 만들어진 클래스를 사용하는 것
- 일반적인 자료형을 사용하기 위해서는 변수로 지정
	예) int x 
- 클래스의 선언(클래스를 객체화)
	> 아래의 경우 클래스를 가지고 생성된 변수를 객체라고 한다.
	예) ClassName variable = new ClassName();

클래스 작성 규칙
- 변수이름 작성 규칙과 동일
- 클래스 이름은 클래스를 정의하여 보관한 파일 이름과 동일
- 자바에서는 클래스 이름의 첫 자는 영문 대문자로 시작(관례적으로)

클래스 생성자
- 클래스가 생성될 때 가장 먼저 호출되는 메소드(멤버함수)
- 클래스 생성자는 클래스의 이름과 동일해야 한다.
- 생성자를 정의하지 않으면 자바 컴파일러는 기본 생성자를 자동으로 만들어 준다.
- 기본 생성자는 파라미터가 없는 생성자 
- 기본 생성자는 리턴 타입 없다.(처리 결과를 리턴하지 않는다)
- this는 클래스가 객체화 되었을 때 가지고 있는 객체 식별자로서 모든 객체들 중 유일한 값을 가진다.
- 예를 들면 클래스가 사람이면 객체는 홍길동, 이순신처럼 존재하는 실체다.
  그러므로 this는 그 객체를 구별하는 DNA와 같다.
- this를 통해서 객체를 식별한다.

멤버함수(member function) 또는 메소드(method)
- 함수인데 클래스에 종속된 함수
- 자바에서 함수는 존재하지 않는다.
- 자바는 어떤 함수이든 클래스에 속해 있어야 한다.
  그러므로 독립적인 함수는 존재하지 않는다.
- 멤버함수는 메소드(method)라 한다.
- 메소드는 일반적인 함수의 특징을 동일하게 가지고 있다.

일반적인 함수
- 블랙박스: 모듈화, 내부에서 처리되는 내용을 밖에서 볼 수 없다.
- 파라미터: 인자, 함수를 호출할 때 전달되는 내용, 자료형(기본자료형, 사용자 자료형)
- 처리결과: 리턴값, 함수가 처리한 결과를 호출한 곳으로 전달되는 값, 
            하나의 자료형에 해당하는 값만 전달(여러개의 값을 전달할 수 없다)
            여러개 값을 전달하려면 사용자 자료형(class)를 만들어 전달
            
메소드의 구조
- void : 리턴값이 없는 경우, 리턴값을 명시하지 않음
- 리턴타입: return 되는 자료형과 같아야 한다.
- 리턴타입이 명시되면 return return값의 형태로 사용
 
 
패키지(Package)
1. 같은 패키지 안에 있는 클래스는 임포트(import)를 하지 않고 사용할 수 있다.
2. 다른 패키지에 있는 클래스를 사용하기 위한 조건은?
	- 클래스와 멤버들이 공개(public)로 되어 있어야 한다.
	- 임포트 :
	 >  import 패키지명.클래스명
	 >  import 패키지명.*;
3. 클래스는 접근 제한자
	- public, default를 지정할 수 있다.
	- public : 공개, 다른 패키지에서 접근하여 사용할 수 있다.
	- default 
	 >  접근 제한자를 명시적으로 지정하지 않으면 디폴트이다.
	 >  동일한 패키지 안에서는 접근 가능
	 >  다른 패키지에서 접근할 수 없다.
	 
4. 비공개(private)
	- 자신이 속한 클래스 멤버에서만 접근할 수 있다.
	- 같은 패키지 안에 있어도 접근할 수 없다.
	- 외부 패키지에서도 접근할 수 없다.
	
접근제한자(Access Modifier)
1. 접근제한자는 클래스, 필드(속성), 생성자, 메소드에 적용할 수 있다.
	- 클래스 : default, public
	- 기타 : default, public, private, protected
	
2. default(디폴트)
	- 접근제한자를 지정하지 않은 경우
	- 동일한 패키지 안에서만 접근
	
3. public(공개)
	- 같은 패키지를 포함해서 다른 모든 패키지에서 접근 가능
	
4. private(비공개)
	- 자신의 클래스 안에서만 접근 가능
	- 클래스의 같은 멤버들만 접근 할 수 있다.
	
5. protected(보호)
	- 자식 클래스에서만 접근 가능
	- 상속된 자식 클래스에서만 접근 할 수 있다.
	
정적멤버(static member)
1. 정적멤버 : 속성, 메소드, 상수
2. 클래스가 객체화 되지 않아도 사용할 수 있다.
3. 인스턴스 멤버가 아니다.
4. this 없다.
5. 클래스별로 유일하게 하나만 생성된다.
6. 공용으로 사용하는 클래스의 멤버