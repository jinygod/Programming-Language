m <- matrix(c(1:5))
m
m1 <- matrix(c(1:10), nrow=2)
m1
c
# 열 우선 행렬 객체 생성
# 2행 5열
m1 <- matrix(c(1:10), nrow=2)
m1
m1 <- matrix(c(1:9), nrow=2)
m2 <- matrix(c(1:9), nrow=2)
m2
m1
# 열 우선 행렬 객체 생성
# 2행 5열
m1 <- matrix(c(1:10), nrow=2)
m1
m2 <- matrix(c(1:9), nrow=2)
m2
m3 <- matrix(c(1:15), nrow=2)
m3
m4 <- matrix(c(1:15), nrow=3)
m4
m4 <- matrix(c(1:17), nrow=3)
m4
m4 <- matrix(c(1:16), nrow=3)
m4
m4 <- matrix(c(1:17), nrow=3)
m4
# 6 = 4 + (4 - 2)
m5 <- matrix(c(1:18), nrow=4)
m5
m6 <- matrix(c(1:18, 1,2), nrow=4)
m6
# 행우선으로 행렬 객체 생성
m7 <- matrix(c(1:10), nrow=2, byrow=T)
m7
# 행으로 묶음
x1 <- c(5,40,50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열로 묶음
mc <- cbind(x1, x2)
mc
m3 <- matrix(10:19, 2)
m3
maxtrix(10:20, 2)
me =maxtrix(10:20, 2)
me
me = maxtrix(10:20, 2)
me
me = matrix(10:20, 2)
me
m3[1,]
m3[1]
m3[2,]
m3[1,1]
m3[2, c(1:5)]
# 3행 3열
m23 <- matrix(c(1:9), nrow=3, ncol=3)
m23
# 3행 3열
m33 <- matrix(c(1:9), nrow=3, ncol=3)
m33
View(m23)
# 3행 3열: 행우선
m33r <- matrix(c(1:9), nrow=3, ncol=3, byrow=T)
m33r
x <- matrix(c(1:9), nrow=3, ncol=3)
x
# 총 요소의 수
length(x)
ncol(x)
nrow(x)
# 행 단위로 각 행의 최대값 구하기
apply(x, 1, max)
apply(x, 2, max)
# 행 단위로 각 행의 합계 구하기
apply(x, 1, sum)
# 열 단위로 각 열의 합계 구하기
apply(x, 2, sum)
help(max)
# 평균값: mean()
apply(x, 1, mean)
# 평균값: mean()
x
apply(x, 1, mean) # 행단위 평균
# 사용자 정의 함수
f <- function(x){
x * c(1,2,3)
}
result <- apply(x, 1, f)
result
x
# 사용자 정의 함수
fx <- function(x){
x * c(1,2,3)
}
result <- apply(x, 1, fx)
result
# 행우선 계산을 수행 후
# 열우선으로 배치
result2 <- apply(x, 2, fx)
result2
x
c1 <- c(1:12)
a1 <- array(c1, c(3,2,2))
a1
# 면 참조
a[,,1]
# 면 참조
a1[,,1]
a1[,,2]
a1
a1[1,1,1]
a1[2,1,1]
a1[,2,1] # 2행 1면면
a[1,,1] # 1행
a1[1,,1] # 1행
a1[1,,2] # 1행 2면
# 배열의 자료 구조
mode(a1)
class(a1)
ㅇㅇ?나진이이
# 데이터 셋 가져오기
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
install.packages("RSADBE")
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
data()
data()
library(RSADBE)
# 데이터 셋 가져오기
install.packages("RSADBE")
install.packages("RSADBE")
library(RSADBE)
data("Bug_Metrics_Software")
str(Bug_Metrics_Software)
no <- c(1,2,3)
name <- c('kim', 'lee', 'jang')
pay <- c(150, 250, 300)
vemp <- data.frame(No = no, Name=name,  Pay=pay)
vemp
# matrix를 이용한 데이터프레임 생성
m <- matrix(
c(1, 'hong', 150,
2, 'lee', 250,
3, 'kim', 300, 3, by=T)
)
m
# matrix를 이용한 데이터프레임 생성
m <- matrix(
c(1, 'hong', 150,
2, 'lee', 250,
3, 'kim', 300), 3, by=T)
m
memp <- data.frame(m)
memp
getwd()
txtemp <- read.table('emp.txt', heaer=1, sep="")
txtemp <- read.table('emp.txt', header=1, sep="")
txtemp
# 텍스트 파일 형태: 헤더, 칼럼은 공백 구분
txtemp <- read.table('emp.txt', header=1, sep="")
txtemp
# 텍스트 파일 형태:
#  - 헤더, 칼럼은 공백 구분
#  - 마지막 칼럼 다음에 라인피드드
txtemp <- read.table('emp.txt', header=1, sep="")
# CSV 파일 형태: 콤마로 구분
csvemp <- read.csv('emp.csv', header=T)
csvemp
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여여
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
csvcol <- c("SNO", "NAME", "PAY")
csvemp <- read.csv('emp.csv', header=F, colnames=csvcol)
csvemp
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
csvcol <- c("SNO", "NAME", "PAY")
csvemp <- read.csv('emp.csv', header=F, colnames=csvcol)
csvemp <- read.csv('emp.csv', header=F, col.names=csvcol)
csvemp
csvemp$SNO
csvemp$NAME
csvemp$PAY
csvemp$PAY
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
# 칼럼이름 지정된 이름으로 변경
csvcol <- c("SNO", "NAME", "PAY")
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
#csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
csvemp$SNO
csvemp$NAME
csvemp$PAY
csvemp2$SNO
csvemp2$NAME
csvemp2$PAY
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
df$x
df$y
df$z
# 데이터 프레임의 자료 구조 보기
str(df)
# 행의 갯수
ncol(df)
# 행의 갯수
nrow(df)
# 칼럼명
names(df)
df[1,]
# 데이터 값
df
df[1,]
# 데이터 값
df # 전체
df[1,]
df[,1]
df[c(2:4), 3]
# 요약통계량 보기
summary(df)
# apply()
apply(df[, c(1,2)], 2, sum)
df
apply(df[,c(1:3)], 2, sum)
apply(df[,1], 2, sum)
apply(df[,c(1)], 2, sum)
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
s1 <- subset(df, x >=3)
s1
str(s1)
class(s1)
s2 <- subset(df, x >=3 & y <=8)
s2
# OR(|) 연산
df
s3 <- subset(df, x >= 3 | y <= 4)
s3
s3 <- subset(df, x >= 3 | y <= 2)
s3
height <- data.frame(id=c(1,2), h=c(180, 170))
weight <- data.frame(id=(1,2), w=c(80,75))
weight <- data.frame(id=c(1,2), w=c(80,75))
height <- data.frame(id=c(1,2), h=c(180, 170))
weight <- data.frame(id=c(1,2), w=c(80,75))
height
weight
# 데이터프레임 병합
user <- merge(height, weight, by.x="id", by.y="id")
user
help(merge)
l1 <- list("lee", "이순신", 95)
l1
[[1]]
l1[[1]]
l1[[2]]
l1[[3]]
l1[1]
# 리스트를 백터로 변환
lv <- unlist(l1)
lv
lv[1]
lv[2]
lv[3]
ls2 <- list(10, 20, 30, 95)
lv2 <- unlist(ls2)
lv2
# 인덱스 참조
lv[1]
lv[2]
lv[3]
#
num <- list(c(1:5), seq(1,10,2))
num
num[[1]]
num[[2]]
# 값으로 배열(Array)
la <- list(array(1:12, c(2,3,2)))
la
la[[1]]
la[[2]]
member <- list(
name=c('홍길동','전우치'),
age=c(35,25),
gender=('남자','여자')
)
member
member <- list(
name=c('홍길동','전우치'),
age=c(35,25),
gender=c('남자','여자')
)
member
member$name
member$age
member$gender
member$name[1]
member$name[2]
member$name
member$name[1]
member$name[2]
member$age
member$age[1]
member$age[2]
member$gender
member$gender[1]
member$gender[2]
member$age[1] <- 45
member$age[2] <- 55
# 키에 해당하는 값 변경
member$age
# 키를 추가
member$id <- "hong"
member
member
# 키를 추가
member$id <- c("hong", "jeon")
member
member$id
# 키 제거
member$id <- NULL
member
member.id
a <- list(c(1:5))
b <- list(c(6:10))
a; b
apply(unlist(a), max)
lapply(c(a,b), max)
lapply(c(a,b), max)
sapply(c(a,b), max)
la <- lapply(c(a,b), max)
class(la)
class(ls)
ls <- sapply(c(a,b), max) # 결과가 벡터
class(ls)
ls <- sapply(c(a,b), max) # 결과가 벡터
class(ls)
mode(ls)
ls
help(apply)
max(unlist(a))
ls
max(unlist(b))
vx <- c(max(unlist(a)), max(unlist(b)))
vx
lax <- list(c(max(unlist(a))), c(max(unlist(b))))
lax
# 각각 리스트 요소의 결과가 리스트로 리턴
la <- lapply(c(a,b), max) # 결과가 리스트
la
class(la)
ml <- list(
c1=list(1,2,3),
c2=list(10,20,30),
c3=list(100,200,300)
)
m1
ml
ml$c1
ml$c2
mlc3
ml$c3
# 다차원 리스트를 열 단위로 바인딩
do.call(cbind, ml)
# 다차원 리스트를 열 단위로 바인딩
# 키가 칼럼, 키의 값의 요소가 행
mx <- do.call(cbind, ml)
class(mx)
library(stringr)
search()
install.packages("stringr")
install.packages("stringr")
a1[1,,1] # 1행ㅇ
ㅇ
library(stringr)
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234홍길동010-1234-4567#end"
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234ABCDEFG홍길동010-1234-4567#end"
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234ABCDEFG홍길동high010-1234-4567#end"
# 영문 소문자가 3자 연속하는 경우 추출
str_extract_all(s1, "[a-z]{3}")
# 3~5자 이상인 경우
str_extract_all(s1, "[a-z]{3,5}")
# 3자 이상인 경우
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[0-9]")
str_extract_all(s1, "[0-9]{4}")
# 특정한 값을 추출
s2 <- "abc1234ABCDEFG홍길동high010-1234-4567#end우리we"
str_extract_all(s2,"홍길동")
str_extract_all(se,"전우치")
str_extract_all(s2,"전우치")
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3})
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3}")
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3}")
# 특정 문자열을 제외: 한글 제외
str_extract_all(s2, "[^가-힣]{3}")
# 특정 문자열을 제외: 한글 제외
str_extract_all(s2, "[^가-힣]")
str_extract_all(s2, "[^가-힣]{5}")
# 특정 문자열을 제외: 한글 제외
# 나머지 연속된 5글자 추출
str_extract_all(s2, "[^가-힣]{5}")
# 다섯글자씩 추출
str_extract_all(s2, "\\w{5}")
str_extract_all(s2, "\\d{4}")
# 주민등록번호 추출
jumin <- "871015-1234567"
str_extract_all(jumin, "[0-9]{6}-[1234][0-9]{6}")
jumin2 <- "871015-5234567"
str_extract_all(jumin2, "[0-9]{6}-[1234][0-9]{6}")
str_extract_all(jumin2, "[0-9]{6}-[12345][0-9]{6}") # character(0)
str_extract_all(jumin2, "[0-9]{6}-[1234][0-9]{6}") # character(0)
str_extract_all(jumin, "\\d{6}-[1234]\\d{6}")
str_extract_all(jumin2, "\\d{6}-[1234]\\d{6}")
jumin3 <- "3.14159"
str_extract_all(jumin3, "[0-9]{6}.[1234][0-9]{6}")
str_extract_all(jumin3, "[0-9]+.[0-9]+")
str_extract_all(jumin3, "[0-9]+.[0-9]+")
str_extract_all(jumin3, "[0-9]+[.][0-9]+")
j4 <- ".1234"
str_extract_all(j4, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j4, "[0-9]*[.][0-9]{1,}")
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234.1"
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
str_extract_all(j5, "[0-9]*[.][0-9]")
str_extract_all(j5, "[0-9]*[.][0-9]*")
j6 <- "1234"
str_extract_all(j6, "[0-9]*[.][0-9]*")
