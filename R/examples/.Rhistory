# 데이터 셋 가져오기
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
install.packages("RSADBE")
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
# 데이터 셋 가져오기
library(RSADBE)
data()
data()
library(RSADBE)
# 데이터 셋 가져오기
install.packages("RSADBE")
install.packages("RSADBE")
library(RSADBE)
data("Bug_Metrics_Software")
str(Bug_Metrics_Software)
no <- c(1,2,3)
name <- c('kim', 'lee', 'jang')
pay <- c(150, 250, 300)
vemp <- data.frame(No = no, Name=name,  Pay=pay)
vemp
# matrix를 이용한 데이터프레임 생성
m <- matrix(
c(1, 'hong', 150,
2, 'lee', 250,
3, 'kim', 300, 3, by=T)
)
m
# matrix를 이용한 데이터프레임 생성
m <- matrix(
c(1, 'hong', 150,
2, 'lee', 250,
3, 'kim', 300), 3, by=T)
m
memp <- data.frame(m)
memp
getwd()
txtemp <- read.table('emp.txt', heaer=1, sep="")
txtemp <- read.table('emp.txt', header=1, sep="")
txtemp
# 텍스트 파일 형태: 헤더, 칼럼은 공백 구분
txtemp <- read.table('emp.txt', header=1, sep="")
txtemp
# 텍스트 파일 형태:
#  - 헤더, 칼럼은 공백 구분
#  - 마지막 칼럼 다음에 라인피드드
txtemp <- read.table('emp.txt', header=1, sep="")
# CSV 파일 형태: 콤마로 구분
csvemp <- read.csv('emp.csv', header=T)
csvemp
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여여
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
csvcol <- c("SNO", "NAME", "PAY")
csvemp <- read.csv('emp.csv', header=F, colnames=csvcol)
csvemp
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
csvcol <- c("SNO", "NAME", "PAY")
csvemp <- read.csv('emp.csv', header=F, colnames=csvcol)
csvemp <- read.csv('emp.csv', header=F, col.names=csvcol)
csvemp
csvemp$SNO
csvemp$NAME
csvemp$PAY
csvemp$PAY
# 데이터프레임의 칼럼명 참조하기
csvemp$사번
csvemp$이름
csvemp$급여
# CSV 파일 형태: 콤마로 구분
# 칼럼이름 지정된 이름으로 변경
csvcol <- c("SNO", "NAME", "PAY")
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
#csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2 <- read.csv('emp2.csv', header=F, col.names=csvcol)
csvemp2
csvemp$SNO
csvemp$NAME
csvemp$PAY
csvemp2$SNO
csvemp2$NAME
csvemp2$PAY
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
df$x
df$y
df$z
# 데이터 프레임의 자료 구조 보기
str(df)
# 행의 갯수
ncol(df)
# 행의 갯수
nrow(df)
# 칼럼명
names(df)
df[1,]
# 데이터 값
df
df[1,]
# 데이터 값
df # 전체
df[1,]
df[,1]
df[c(2:4), 3]
# 요약통계량 보기
summary(df)
# apply()
apply(df[, c(1,2)], 2, sum)
df
apply(df[,c(1:3)], 2, sum)
apply(df[,1], 2, sum)
apply(df[,c(1)], 2, sum)
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
s1 <- subset(df, x >=3)
s1
str(s1)
class(s1)
s2 <- subset(df, x >=3 & y <=8)
s2
# OR(|) 연산
df
s3 <- subset(df, x >= 3 | y <= 4)
s3
s3 <- subset(df, x >= 3 | y <= 2)
s3
height <- data.frame(id=c(1,2), h=c(180, 170))
weight <- data.frame(id=(1,2), w=c(80,75))
weight <- data.frame(id=c(1,2), w=c(80,75))
height <- data.frame(id=c(1,2), h=c(180, 170))
weight <- data.frame(id=c(1,2), w=c(80,75))
height
weight
# 데이터프레임 병합
user <- merge(height, weight, by.x="id", by.y="id")
user
help(merge)
l1 <- list("lee", "이순신", 95)
l1
[[1]]
l1[[1]]
l1[[2]]
l1[[3]]
l1[1]
# 리스트를 백터로 변환
lv <- unlist(l1)
lv
lv[1]
lv[2]
lv[3]
ls2 <- list(10, 20, 30, 95)
lv2 <- unlist(ls2)
lv2
# 인덱스 참조
lv[1]
lv[2]
lv[3]
#
num <- list(c(1:5), seq(1,10,2))
num
num[[1]]
num[[2]]
# 값으로 배열(Array)
la <- list(array(1:12, c(2,3,2)))
la
la[[1]]
la[[2]]
member <- list(
name=c('홍길동','전우치'),
age=c(35,25),
gender=('남자','여자')
)
member
member <- list(
name=c('홍길동','전우치'),
age=c(35,25),
gender=c('남자','여자')
)
member
member$name
member$age
member$gender
member$name[1]
member$name[2]
member$name
member$name[1]
member$name[2]
member$age
member$age[1]
member$age[2]
member$gender
member$gender[1]
member$gender[2]
member$age[1] <- 45
member$age[2] <- 55
# 키에 해당하는 값 변경
member$age
# 키를 추가
member$id <- "hong"
member
member
# 키를 추가
member$id <- c("hong", "jeon")
member
member$id
# 키 제거
member$id <- NULL
member
member.id
a <- list(c(1:5))
b <- list(c(6:10))
a; b
apply(unlist(a), max)
lapply(c(a,b), max)
lapply(c(a,b), max)
sapply(c(a,b), max)
la <- lapply(c(a,b), max)
class(la)
class(ls)
ls <- sapply(c(a,b), max) # 결과가 벡터
class(ls)
ls <- sapply(c(a,b), max) # 결과가 벡터
class(ls)
mode(ls)
ls
help(apply)
max(unlist(a))
ls
max(unlist(b))
vx <- c(max(unlist(a)), max(unlist(b)))
vx
lax <- list(c(max(unlist(a))), c(max(unlist(b))))
lax
# 각각 리스트 요소의 결과가 리스트로 리턴
la <- lapply(c(a,b), max) # 결과가 리스트
la
class(la)
ml <- list(
c1=list(1,2,3),
c2=list(10,20,30),
c3=list(100,200,300)
)
m1
ml
ml$c1
ml$c2
mlc3
ml$c3
# 다차원 리스트를 열 단위로 바인딩
do.call(cbind, ml)
# 다차원 리스트를 열 단위로 바인딩
# 키가 칼럼, 키의 값의 요소가 행
mx <- do.call(cbind, ml)
class(mx)
library(stringr)
search()
install.packages("stringr")
install.packages("stringr")
a1[1,,1] # 1행ㅇ
ㅇ
library(stringr)
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234홍길동010-1234-4567#end"
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234ABCDEFG홍길동010-1234-4567#end"
str_extract_all(s1, "[a-z]{3}")
# 정규표현식
s1 <- "abc1234ABCDEFG홍길동high010-1234-4567#end"
# 영문 소문자가 3자 연속하는 경우 추출
str_extract_all(s1, "[a-z]{3}")
# 3~5자 이상인 경우
str_extract_all(s1, "[a-z]{3,5}")
# 3자 이상인 경우
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[0-9]")
str_extract_all(s1, "[0-9]{4}")
# 특정한 값을 추출
s2 <- "abc1234ABCDEFG홍길동high010-1234-4567#end우리we"
str_extract_all(s2,"홍길동")
str_extract_all(se,"전우치")
str_extract_all(s2,"전우치")
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3})
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3}")
# 모든 한글을 추출
str_extract_all(s2, "[가-힣]{3}")
# 특정 문자열을 제외: 한글 제외
str_extract_all(s2, "[^가-힣]{3}")
# 특정 문자열을 제외: 한글 제외
str_extract_all(s2, "[^가-힣]")
str_extract_all(s2, "[^가-힣]{5}")
# 특정 문자열을 제외: 한글 제외
# 나머지 연속된 5글자 추출
str_extract_all(s2, "[^가-힣]{5}")
# 다섯글자씩 추출
str_extract_all(s2, "\\w{5}")
str_extract_all(s2, "\\d{4}")
# 주민등록번호 추출
jumin <- "871015-1234567"
str_extract_all(jumin, "[0-9]{6}-[1234][0-9]{6}")
jumin2 <- "871015-5234567"
str_extract_all(jumin2, "[0-9]{6}-[1234][0-9]{6}")
str_extract_all(jumin2, "[0-9]{6}-[12345][0-9]{6}") # character(0)
str_extract_all(jumin2, "[0-9]{6}-[1234][0-9]{6}") # character(0)
str_extract_all(jumin, "\\d{6}-[1234]\\d{6}")
str_extract_all(jumin2, "\\d{6}-[1234]\\d{6}")
jumin3 <- "3.14159"
str_extract_all(jumin3, "[0-9]{6}.[1234][0-9]{6}")
str_extract_all(jumin3, "[0-9]+.[0-9]+")
str_extract_all(jumin3, "[0-9]+.[0-9]+")
str_extract_all(jumin3, "[0-9]+[.][0-9]+")
j4 <- ".1234"
str_extract_all(j4, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j4, "[0-9]*[.][0-9]{1,}")
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234.1"
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
j5 <- "1234."
str_extract_all(j5, "[0-9]*[.][0-9]{1,}")
str_extract_all(j5, "[0-9]*[.][0-9]")
str_extract_all(j5, "[0-9]*[.][0-9]*")
j6 <- "1234"
str_extract_all(j6, "[0-9]*[.][0-9]*")
v <- c(1:n)
v <- seq(1, n, 2)
v1 <- seq(1, n, 2)
v2 <- seq(2, n, 2)
n <- 100
v1 <- seq(1, n, 2)
v2 <- seq(2, n, 2)
v1
n <- 10
v1 <- seq(1, n, 2)
v2 <- seq(2, n, 2)
v1
sv1 <- apply(v1, 1, sum)
oddsum <- function(b) sum(seq(from=1, to=b, by=2))
oddsum(5)
oddsum <- function(b) sum(seq(1, b, 2))
oddsum(5)
evensum <- function(b) sum(seq(2, b, 2))
evensum(10)
evensum(6)
oddsum <- function(n) sum(seq(1, n, 2))
oddsum(5)
oddsum <- function(n) sum(seq(1, n, 2))
oddsum(5)
evensum <- function(n) sum(seq(2, n, 2))
evensum(6)
oddsum(9)
evensum(10)
oddsum <- function(n) sum(seq(1, n, 2))
oddsum(5)
oddsum(9)
evensum <- function(n) sum(seq(2, n, 2))
evensum(6)
evensum(10)
m <- matrix(c(1:16), nrow=4)
m
oddsum <- sum(seq(1, n, 2))
oddsum(5)
oddsum <- function(n) sum(seq(1, n, 2))
oddsum(5)
apply(m,1,max)
apply(m,2,max)
apply(m,1,max)
apply(m,2,max)
apply(m,1,sum)
apply(m,2,sum)
apply(m,1,mean)
apply(m,2,mean)
m <- matrix(c(1:16), nrow=4)
m
apply(m,1,max)
apply(m,2,max)
apply(m,1,sum)
apply(m,2,sum)
apply(m,1,mean)
apply(m,2,mean)
vec(1:12)
vec <- (1:12)
arr <- array(vec,c(3,2,2))
arr
apply(arr,1,sum)
apply(arr,2,sum)
vec <- (1:12)
arr <- array(vec,c(3,2,2))
arr
apply(arr,1,sum)
apply(arr,2,sum)
str_extract(jumin1, "[0-9]{6}-[0-9]{7}")
jumin1 <- "871015-1234567"
jumin2 <- "871015-2234567"
jumin3 <- "871015-3234567"
jumin4 <- "871015-4234567"
str_extract(jumin1, "[0-9]{6}-[0-9]{7}")
str_extract(jumin1, "[0-9]{6}-[1234][0-9]{6}")
str_extract(jumin1,"[0-9]{6}-[1234][0-9]{6}")
install.packages(stringr)
str_extract(jumin1,"[0-9]{6}-[1234][0-9]{6}")
install.packages(stringr)
library(stringr)
str_extract(jumin1,"[0-9]{6}-[1234][0-9]{6}")
str_extract(jumin2,"[0-9]{6}-[1234][0-9]{6}")
str_extract(jumin3,"[0-9]{6}-[1234][0-9]{6}")
str_extract(jumin4,"[0-9]{6}-[1234][0-9]{6}")
str_extract(tel2, "[0-9]{3}-[0-9]{3,4}-[0-9]{4}")
jumin <- c("871015-1234567",
"871015-2234567",
"871015-3234567",
"871015-4234567")
str_extract(jumin, "[0-9]{6}-[1234][0-9]{6}")
str_extract(tel2, "[0-9]{3}-[0-9]{3,4}-[0-9]{4}")
# 전화번호 추출
tel <- c("010-1234-5678",
"031-123-4567",
"031-1234-5678")
str_extract(tel, "[0-9]{3}-[0-9]{3,4}-[0-9]{4}")
# 주민등록번호 추출
install.packages(stringr)
library(stringr)
jumin <- c("871015-1234567",
"871015-2234567",
"871015-3234567",
"871015-4234567")
str_extract(jumin, "[0-9]{6}-[1234][0-9]{6}")
# 전화번호 추출
tel <- c("010-1234-5678",
"031-123-4567",
"031-1234-5678")
str_extract(tel, "[0-9]{3}-[0-9]{3,4}-[0-9]{4}")
read(test.csv)
read.file(test.csv)
read.csv(test.csv)
read.csv(file="test.csv")
cr <- read.csv(file="test.csv")
cr
apply(cr$키,2,min)
apply(cr$키,2,min)
min(cr$키)
max(cr$키)
mean(cr$키)
min(cr$몸무게)
# CSV 파일 읽기
cr <- read.csv(file="test.csv")
cr
# 가장 작은 키
min(cr$키)
# 가장 큰 키
max(cr$키)
# 평균 키
mean(cr$키)
# 가장 적은 몸무게
min(cr$몸무게)
# 가장 무거운 몸무게
max(cr$몸무게)
# 평균 몸무게
mean(cr$몸무게)
apply(arr,1,sum)
arr
apply(arr[,,1],1,sum)
apply(arr[,,2],1,sum)
apply(arr[,,1],1,sum)
apply(arr[,,],1,sum)
apply(arr[,,1],1,sum)
apply(arr[,,1],1,sum)
apply(arr[,,1],1,sum)
apply(arr[,,2],1,sum)
apply(arr[,,1],2,sum)
apply(arr[,,2],2,sum)
# array 생성
vec <- (1:12)
arr <- array(vec,c(3,2,2))
arr
# 각 면의 행의 합계
apply(arr[,,1],1,sum)
apply(arr[,,2],1,sum)
# 각 면의 열의 합계
apply(arr[,,1],2,sum)
apply(arr[,,2],2,sum)
